generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recepty {
  id          String     @id @unique @default(cuid())
  createdAt   DateTime   @default(now())
  title       String
  content     String
  ingredients String
  imgUrl      String     @default("https://via.placeholder.com/150")
  difficulty  Difficulty @default(EASY)
  portions    Int        @default(4)
  time        Int        @default(0)
  authorId    String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        Tags[]
  favBy  FavoriteRecipesOnUser[]
}

model FavoriteRecipesOnUser {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String  
  recept       Recepty @relation(fields: [receptId], references: [id], onDelete: Cascade)
  receptId     String

  @@id([userId, receptId])
}

model Tags {
  name      String  @unique @id
  recepty   Recepty[] 
}

model News {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
}

model Options {
  id                String  @id @default(cuid())
  title             String
  meta              String
  showNews          Boolean @default(false)
  underConstruction Boolean @default(false)
  name              String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  recepty      Recepty[]
  favorites    FavoriteRecipesOnUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tiptap {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
}

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXTRAHARD
}
