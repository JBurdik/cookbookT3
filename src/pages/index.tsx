import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import React, { useState } from "react";

import { type Recepty } from "@prisma/client";
import Link from "next/link";
import Layout from "../components/Layout";
import { api } from "../utils/api";

import { generateHTML } from "@tiptap/react";
import StarterKit from "@tiptap/starter-kit";
import Image from "next/image";
import { FiAlertTriangle } from "react-icons/fi";
import { BounceLoader } from "react-spinners";
import type { JSONObject } from "superjson/dist/types";

function Home() {
  const news = api.news.getNews.useQuery(undefined).data;
  const getRecipes = api.recipes.getAll.useQuery().data;
  const options = api.options.getAll.useQuery().data;
  const [recipes, setRecipes] = useState<Recepty[]>();

  const generateContent = (json: JSONObject) => {
    const output = generateHTML(json, [StarterKit]);
    console.log(output);
    return output;
  };

  if (getRecipes && !recipes) {
    setRecipes([...getRecipes]);
  }
  if (options?.underConstruction)
    return (
      <Layout>
        <FiAlertTriangle size={200} className="text-yellow-300" />
        <h1 className="text-4xl">
          Pracuji na vylepšení webu brzy bude znovu k dispozici
        </h1>
      </Layout>
    );
  return (
    <>
      <Head>
        <title>{options?.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-6 py-16 ">
          <h1 className="sm:text-[5rem]">
            {options?.name}{" "}
            <span className="text-[hsl(280,100%,70%)]">Kuchařka</span>
          </h1>
          <div className="grid grid-cols-2 items-center justify-center gap-4">
            {news &&
              options?.showNews &&
              news.map((item, i) => {
                return (
                  <div
                    key={i}
                    className="flex flex-col items-center justify-center gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
                  >
                    <h3 className="text-2xl font-bold">{item.title}</h3>

                    <p className="text-lg">{item.title}</p>
                  </div>
                );
              })}
          </div>
          <h2 className="text-3xl">Recepty: </h2>
          <div className="max-w-5xlxl grid h-full w-full grid-cols-1 items-center justify-center gap-4 md:grid-cols-2 lg:grid-cols-3">
            {recipes ? (
              recipes.map((recipe, i) => {
                const output = generateContent(
                  JSON.parse(recipe.content) as JSONObject
                );
                return (
                  <Link
                    href={`/recipe/${recipe.id}`}
                    className="h-full"
                    key={recipe.id}
                  >
                    <div
                      key={i}
                      className="flex h-full flex-col items-center justify-start gap-4 rounded-xl bg-white/10 p-4 text-white transition-all hover:bg-white/20"
                    >
                      <div className="relative flex h-80 w-full items-center justify-center">
                        <Image
                          src={recipe.imgUrl}
                          fill
                          className="rounded-xl object-cover"
                          alt={recipe.title}
                        />
                      </div>
                      <h3 className="text-2xl font-bold">{recipe.title}</h3>

                      <p
                        className="text-lg"
                        dangerouslySetInnerHTML={{ __html: output }}
                      ></p>

                      {recipe.ingredients &&
                        recipe.ingredients
                          .split(",")
                          .map((item, i) => <p key={i}>{item}</p>)}
                    </div>
                  </Link>
                );
              })
            ) : (
              <div className="flex flex-col items-center justify-center gap-5">
                <BounceLoader color="#786298" />
                <p className="text-xs font-extralight uppercase tracking-widest">
                  Načítám recepty...
                </p>
              </div>
            )}
          </div>
          <div className="flex flex-col items-center justify-center gap-4"></div>
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const role = api.example.getUserRole.useQuery(undefined, {
    enabled: sessionData?.user !== undefined,
  }).data?.role;

  return (
    <div className="fixed bottom-0 flex w-full flex-row items-center justify-between gap-4 bg-black/70 px-6 py-2">
      <p className="flex flex-row items-center justify-center gap-2 text-center text-white">
        {sessionData && (
          <span className="text-lg">{sessionData.user?.name}</span>
        )}
        <Link href="/admin">
          <span className="text-center text-xs text-red-500">
            {role && <span> - {role}</span>}
          </span>
        </Link>
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
